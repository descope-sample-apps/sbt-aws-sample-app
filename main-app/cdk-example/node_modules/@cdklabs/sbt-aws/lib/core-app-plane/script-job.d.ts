import * as codebuild from 'aws-cdk-lib/aws-codebuild';
import { IRuleTarget } from 'aws-cdk-lib/aws-events';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as stepfunctions from 'aws-cdk-lib/aws-stepfunctions';
import { Construct } from 'constructs/lib';
import { DetailType, IEventManager } from '@cdklabs/sbt-aws/lib/utils/sbt-aws/lib/utils/sbt-aws/lib/utils/sbt-aws/lib/utils';
/**
 * Represents the different kinds of environment variables that can
 * be emitted as part of a script job.
 */
export interface EnvironmentVariablesToOutgoingEventProps {
    /**
     * The data from the script job that pertains to the tenant.
     */
    readonly tenantData?: string[];
    /**
     * The data from the script job that pertains to the registration of the tenant.
     */
    readonly tenantRegistrationData?: string[];
}
/**
 * Represents the DetailTypes that can be emitted
 * as part of the outgoing event.
 * @readonly
 */
export interface OutgoingEventDetailTypes {
    /**
     * The detail type for a successful event.
     */
    readonly success: DetailType;
    /**
     * The detail type for a failed event.
     */
    readonly failure: DetailType;
}
/**
 * Encapsulates the list of properties for a ScriptJob.
 */
export interface ScriptJobProps {
    /**
     * The key where the job identifier is to be extracted from in
     * the incoming event.
     *
     * This will be used as the key that will be populated with
     * the job identifier in the outgoing event.
     *
     * Ex: if jobIdentifierKey == 'myKey' then
     * the incoming event should look something like this:
     *   {'myKey': '123', ....}
     * and the outgoing event will look something like this:
     *   {'myKey': '123', 'jobOutput': { ... }}
     */
    readonly jobIdentifierKey: string;
    /**
     * In the case of failure, this is the object that will
     * be included in the outgoing event `jobOutput` field.
     *
     * Ex: If the job fails, the outgoing event will look like this:
     *   {$jobIdentifierKey: 'XXX', 'jobOutput': $jobFailureStatus}
     */
    readonly jobFailureStatus: {
        [key: string]: string;
    };
    /**
     * The IAM permission document for the ScriptJob.
     */
    readonly permissions: iam.PolicyDocument;
    /**
     * The bash script to run as part of the ScriptJob.
     */
    readonly script: string;
    /**
     * The Source to use when executing the ScriptJob.
     *
     * This can be used to pre-populate the ScriptJob environment
     * with files from S3, as an example.
     */
    readonly source?: codebuild.Source;
    /**
     * The incoming event DetailType that triggers this job.
     */
    readonly incomingEvent: DetailType;
    /**
     * The outgoing event DetailTypes that are emitted upon job success or failure.
     */
    readonly outgoingEvent: OutgoingEventDetailTypes;
    /**
     * The bash script to run after the main script has completed.
     */
    readonly postScript?: string;
    /**
     * The environment variables to import into the ScriptJob from event details field.
     * This argument consists of the names of only string type variables. Ex. 'test'
     */
    readonly environmentStringVariablesFromIncomingEvent?: string[];
    /**
     * The environment variables to import into the ScriptJob from event details field.
     * This argument consists of the names of only JSON-formatted string type variables.
     * Ex. '{"test": 2}'
     */
    readonly environmentJSONVariablesFromIncomingEvent?: string[];
    /**
     * The environment variables to export into the outgoing event once the ScriptJob has finished.
     */
    readonly environmentVariablesToOutgoingEvent?: EnvironmentVariablesToOutgoingEventProps;
    /**
     * The variables to pass into the codebuild ScriptJob.
     */
    readonly scriptEnvironmentVariables?: {
        [key: string]: string;
    };
    /**
     * The EventManager instance that allows connecting to events flowing between
     * the Control Plane and other components.
     */
    readonly eventManager: IEventManager;
}
/**
 * Provides a ScriptJob to execute arbitrary bash code.
 */
export declare class ScriptJob extends Construct {
    /**
     * The codebuildProject used to implement this ScriptJob.
     * @attribute
     */
    readonly codebuildProject: codebuild.Project;
    /**
     * The StateMachine used to implement this ScriptJob orchestration.
     * @attribute
     */
    readonly provisioningStateMachine: stepfunctions.StateMachine;
    /**
     * The eventTarget to use when triggering this ScriptJob.
     * @attribute
     */
    readonly eventTarget: IRuleTarget;
    /**
     * The environment variables to export into the outgoing event once the ScriptJob has finished.
     * @attribute
     */
    readonly environmentVariablesToOutgoingEvent?: EnvironmentVariablesToOutgoingEventProps;
    /**
     * The incoming event DetailType that triggers this job.
     */
    readonly incomingEvent: DetailType;
    constructor(scope: Construct, id: string, props: ScriptJobProps);
    private createCodeBuildProject;
    private createProvisioningStateMachine;
}

import { Source } from 'aws-cdk-lib/aws-codebuild';
import * as iam from 'aws-cdk-lib/aws-iam';
import { Construct } from 'constructs/lib';
import { EnvironmentVariablesToOutgoingEventProps, ScriptJob } from '@cdklabs/sbt-aws/lib/core-app-plane/script-job-aws/lib/core-app-plane/script-job-aws/lib/core-app-plane/script-job-aws/lib/core-app-plane/script-job';
import { IEventManager } from '@cdklabs/sbt-aws/lib/utils/sbt-aws/lib/utils/sbt-aws/lib/utils/sbt-aws/lib/utils';
/**
 * Encapsulates the list of properties for a ScriptJobs that
 * handle lifecycle management for tenants.
 */
export interface TenantLifecycleScriptJobProps {
    /**
     * The IAM permission document for the ScriptJob.
     */
    readonly permissions: iam.PolicyDocument;
    /**
     * The bash script to run as part of the ScriptJob.
     */
    readonly script: string;
    /**
     * The bash script to run after the main script has completed.
     */
    readonly postScript?: string;
    /**
     * The Source to use when executing the ScriptJob.
     *
     * This can be used to pre-populate the ScriptJob environment
     * with files from S3, as an example.
     */
    readonly source?: Source;
    /**
     * The environment variables to import into the ScriptJob from event details field.
     * This argument consists of the names of only string type variables. Ex. 'test'
     */
    readonly environmentStringVariablesFromIncomingEvent?: string[];
    /**
     * The environment variables to import into the ScriptJob from event details field.
     * This argument consists of the names of only JSON-formatted string type variables.
     * Ex. '{"test": 2}'
     */
    readonly environmentJSONVariablesFromIncomingEvent?: string[];
    /**
     * The environment variables to export into the outgoing event once the ScriptJob has finished.
     */
    readonly environmentVariablesToOutgoingEvent?: EnvironmentVariablesToOutgoingEventProps;
    /**
     * The variables to pass into the codebuild ScriptJob.
     */
    readonly scriptEnvironmentVariables?: {
        [key: string]: string;
    };
    /**
     * The EventManager instance that allows connecting to events flowing between
     * the Control Plane and other components.
     */
    readonly eventManager: IEventManager;
}
/**
 * Provides a ProvisioningScriptJob to execute arbitrary bash code.
 * This is a simple wrapper around ScriptJob that reduces some of the parameters
 * that need to be configured.
 */
export declare class ProvisioningScriptJob extends ScriptJob {
    constructor(scope: Construct, id: string, props: TenantLifecycleScriptJobProps);
}
/**
 * Provides a DeprovisioningScriptJob to execute arbitrary bash code.
 * This is a simple wrapper around ScriptJob that reduces some of the parameters
 * that need to be configured.
 */
export declare class DeprovisioningScriptJob extends ScriptJob {
    constructor(scope: Construct, id: string, props: TenantLifecycleScriptJobProps);
}

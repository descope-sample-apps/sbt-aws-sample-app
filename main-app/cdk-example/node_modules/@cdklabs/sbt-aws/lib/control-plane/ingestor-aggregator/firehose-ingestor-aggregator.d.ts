import * as firehose from '@aws-cdk/aws-kinesisfirehose-alpha/lib';
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs/lib';
import { IDataIngestorAggregator } from '@cdklabs/sbt-aws/lib/control-plane/ingestor-aggregator/ingestor-aggregator-interfaceane/ingestor-aggregator/ingestor-aggregator-interfaceane/ingestor-aggregator/ingestor-aggregator-interfaceane/ingestor-aggregator/ingestor-aggregator-interface';
/**
 * Encapsulates the list of properties for a FirehoseAggregator construct.
 */
export interface FirehoseAggregatorProps {
    /**
     * The name to use for the primary key column for the dynamoDB database.
     */
    readonly primaryKeyColumn: string;
    /**
     * The JMESPath to find the primary key value in the incoming data stream.
     */
    readonly primaryKeyPath: string;
    /**
     * The JMESPath to find the key value in the incoming data stream that will be aggregated.
     */
    readonly aggregateKeyPath: string;
    /**
     * The JMESPath to find the numeric value of key in the incoming data stream that will be aggregated.
     */
    readonly aggregateValuePath: string;
    /**
     * Flag to delete objects in the firehoseDestinationBucket when deleting the bucket.
     */
    readonly autoDeleteObjects?: boolean;
}
/**
 * Creates a Kinesis Firehose to accept high-volume data, which it then routes to an s3 bucket.
 * The s3 bucket triggers a lambda which processes the data and stores it in a DynamoDB table
 * containing the aggregated data.
 */
export declare class FirehoseAggregator extends Construct implements IDataIngestorAggregator {
    /**
     * The DynamoDB table containing the aggregated data.
     */
    readonly dataRepository: dynamodb.ITable;
    /**
     * The Python Lambda function responsible for aggregating the raw data coming in
     * via the dataIngestor.
     */
    readonly dataAggregator: lambda.IFunction;
    /**
     * The Firehose DeliveryStream ingestor responsible for accepting the incoming data.
     */
    readonly dataIngestor: firehose.DeliveryStream;
    /**
     * The name of the dataIngestor. This is used for visibility.
     */
    readonly dataIngestorName: string;
    constructor(scope: Construct, id: string, props: FirehoseAggregatorProps);
}

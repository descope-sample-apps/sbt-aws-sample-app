import * as apigatewayV2 from 'aws-cdk-lib/aws-apigatewayv2';
import { Construct } from 'constructs/lib';
import { TenantManagementTable } from '@cdklabs/sbt-aws/lib/control-plane/tenant-management/tenant-management.tablerol-plane/tenant-management/tenant-management.tablerol-plane/tenant-management/tenant-management.tablerol-plane/tenant-management/tenant-management.table';
import { IEventManager } from '@cdklabs/sbt-aws/lib/utilst-aws/lib/utilst-aws/lib/utilst-aws/lib/utils';
import { IAuth } from '@cdklabs/sbt-aws/lib/control-plane/auth/auth-interfaceontrol-plane/auth/auth-interfaceontrol-plane/auth/auth-interfaceontrol-plane/auth/auth-interface';
/**
 * Represents the properties required to initialize the TenantManagementService.
 *
 * @interface TenantManagementServiceProps
 * @property {apigatewayV2.HttpApi} api - The HTTP API Gateway instance.
 * @property {IAuth} auth - The authentication mechanism for the service.
 * @property {apigatewayV2.IHttpRouteAuthorizer} authorizer - The HTTP route authorizer for the service.
 * @property {IEventManager} eventManager - The event manager for handling tenant-related events.
 */
export interface TenantManagementServiceProps {
    readonly api: apigatewayV2.HttpApi;
    readonly auth: IAuth;
    readonly authorizer: apigatewayV2.IHttpRouteAuthorizer;
    readonly eventManager: IEventManager;
}
/**
 * Represents a service for managing tenants in the application.
 *
 * @class TenantManagementService
 * @extends Construct
 */
export declare class TenantManagementService extends Construct {
    /**
     * The tenant management table instance.
     *
     * @type {TenantManagementTable}
     */
    table: TenantManagementTable;
    /**
     * The path for the tenant registration endpoint.
     *
     * @type {string}
     */
    readonly tenantsPath: string;
    /**
     * The path for the tenant registration endpoint with the tenant registration id.
     *
     * @type {string}
     */
    readonly tenantIdPath: string;
    /**
     * Constructs a new instance of the TenantManagementService.
     *
     * @param {Construct} scope - The parent construct.
     * @param {string} id - The ID of the construct.
     * @param {TenantManagementServiceProps} props - The properties required to initialize the service.
     */
    constructor(scope: Construct, id: string, props: TenantManagementServiceProps);
}

import * as apigatewayV2 from 'aws-cdk-lib/aws-apigatewayv2';
import { IFunction } from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';
import { DetailType } from '@cdklabs/sbt-aws/lib/utils/event-managers/lib/utils/event-manager';
export declare const addTemplateTag: (construct: Construct, tag: string) => void;
export declare const generateAWSManagedRuleSet: (managedGroupName: string, priority: number) => {
    name: string;
    priority: number;
    overrideAction: {
        none: {};
    };
    statement: {
        managedRuleGroupStatement: {
            name: string;
            vendorName: string;
        };
    };
    visibilityConfig: {
        cloudWatchMetricsEnabled: boolean;
        metricName: string;
        sampledRequestsEnabled: boolean;
    };
};
export declare const conditionallyAddScope: (unknownScope?: string) => string[];
export interface IRoute {
    readonly method: apigatewayV2.HttpMethod;
    readonly scope?: string;
    readonly path: string;
    readonly integration: apigatewayV2.HttpRouteIntegration;
    readonly authorizer?: apigatewayV2.IHttpRouteAuthorizer;
}
export declare const generateRoutes: (api: apigatewayV2.HttpApi, routes: IRoute[], authorizer?: apigatewayV2.IHttpRouteAuthorizer) => apigatewayV2.HttpRoute[];
/**
 * Represents a function that is triggered synchronously via an API Gateway.
 */
export interface ISyncFunction {
    /**
     * The function definition.
     */
    readonly handler: IFunction;
    /**
     * The scope required to authorize access to this function.
     * This is set in the API Gateway.
     * If it is not provided, the API Gateway will not check for any scopes on the token.
     */
    readonly scope?: string;
}
/**
 * Represents a function that is triggered asynchronously via an event.
 */
export interface IASyncFunction {
    /**
     * The function definition.
     */
    readonly handler: IFunction;
    /**
     * The detail-type that will trigger the handler function.
     */
    readonly trigger?: DetailType;
}
